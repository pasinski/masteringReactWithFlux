'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListItem = require('./ListItem');

var _ListItem2 = _interopRequireDefault(_ListItem);

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var ListContainer = (function (_Component) {
	_inherits(ListContainer, _Component);

	_createClass(ListContainer, null, [{
		key: 'propTypes',
		value: {
			onSelect: _react.PropTypes.func,
			data: _react.PropTypes.array,
			className: _react.PropTypes.string,
			itemClassName: _react.PropTypes.string,
			styles: _react.PropTypes.object,
			itemStyles: _react.PropTypes.object,
			navigate: _react.PropTypes.number.isRequired
		},
		enumerable: true
	}, {
		key: 'defaultProps',
		value: {
			itemStyles: {}
		},
		enumerable: true
	}]);

	function ListContainer(props) {
		_classCallCheck(this, ListContainer);

		_get(Object.getPrototypeOf(ListContainer.prototype), 'constructor', this).call(this);
		var styles = _.cloneDeep(props.itemStyles);

		if (styles['.active']) {
			Object.assign(styles, styles['.active'] || {});
			delete styles['.active'];
		}

		this.state = {
			activeStyle: styles
		};
	}

	_createClass(ListContainer, [{
		key: 'render',
		value: function render() {
			var _props = this.props;
			var onSelect = _props.onSelect;
			var data = _props.data;
			var className = _props.className;
			var itemClassName = _props.itemClassName;
			var styles = _props.styles;
			var navigate = _props.navigate;
			var activeStyle = this.state.activeStyle;

			// lodash cloneDeep prevents data mutation
			var itemStyles = _.cloneDeep(this.props.itemStyles);
			if (itemStyles['.active']) {
				delete itemStyles['.active'];
			}

			var container = _react2['default'].createElement(
				'ul',
				{ className: className, style: styles, ref: 'autocompleter-listContainer' },
				data.map(function (item, index) {
					return _react2['default'].createElement(_ListItem2['default'], { onSelect: onSelect, content: item, key: item, className: itemClassName, styles: navigate === index ? activeStyle : itemStyles, active: navigate === index });
				})
			);

			if (!data.length) {
				return _react2['default'].cloneElement(container, {
					style: {
						display: 'none'
					}
				});
			} else {
				return container;
			}
		}
	}]);

	return ListContainer;
})(_react.Component);

exports['default'] = ListContainer;
module.exports = exports['default'];