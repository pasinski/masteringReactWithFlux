'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Input = require('./Input');

var _Input2 = _interopRequireDefault(_Input);

var _ListContainer = require('./ListContainer');

var _ListContainer2 = _interopRequireDefault(_ListContainer);

var AutoCompleter = (function (_Component) {
	_inherits(AutoCompleter, _Component);

	function AutoCompleter() {
		var _this = this;

		_classCallCheck(this, AutoCompleter);

		_get(Object.getPrototypeOf(AutoCompleter.prototype), 'constructor', this).apply(this, arguments);

		this.state = {
			itemList: this.props.data,
			filteredItemList: [],
			inputValue: this.props.value,
			navigate: 0
		};

		this.onSelect = function (value) {
			_this.setState({
				filteredItemList: [],
				inputValue: value,
				navigate: 0
			});

			if (_this.props.onSelect) {
				_this.props.onSelect(value);
			}
		};

		this.onBlur = function () {
			_this.setState({
				filteredItemList: []
			});

			if (_this.props.onBlur) {
				_this.props.onBlur();
			}
		};

		this.onFocus = function () {
			if (_this.props.onFocus) {
				_this.props.onFocus();
			}
		};

		this.onChange = function (value) {
			if (_this.props.onChange) {
				_this.props.onChange(value);
			}
		};

		this.handleInputChange = function (e) {
			_this.onChange(e.target.value);
			var updatedList = [];

			_this.setState({
				inputValue: e.target.value,
				navigate: 0
			});

			if (e.target.value.length) {
				updatedList = _this.state.itemList.filter(function (item) {
					return e.target.value.length <= item.length && item.toLowerCase().search(e.target.value.toLowerCase()) !== -1;
				});
			}

			if (_this.props.limit && updatedList.length > _this.props.limit) {
				updatedList = updatedList.slice(0, _this.props.limit);
			}

			_this.setState({
				filteredItemList: updatedList
			});
		};

		this.handleKeyEvent = function (e) {
			var _state = _this.state;
			var filteredItemList = _state.filteredItemList;
			var inputValue = _state.inputValue;
			var _props = _this.props;
			var onSelect = _props.onSelect;
			var onChange = _props.onChange;
			var navigate = _this.state.navigate;

			// down = 40, up = 38, enter = 13
			if (filteredItemList.length && (e.keyCode === 40 || e.keyCode === 38)) {
				if (e.keyCode === 40) {
					navigate++;
					if (navigate <= filteredItemList.length) {
						_this.setState({
							navigate: navigate,
							inputValue: filteredItemList[navigate - 1]
						}, onChange(filteredItemList[navigate - 1]));
					}
				}
				if (e.keyCode === 38) {
					if (navigate === 1) {
						_this.setState({
							navigate: 0,
							inputValue: '',
							filteredItemList: []
						}, onChange(filteredItemList[navigate - 1]));
					}
					if (navigate > 1) {
						navigate--;
						_this.setState({
							navigate: navigate,
							inputValue: filteredItemList[navigate - 1]
						}, onChange(filteredItemList[navigate - 1]));
					}
				}
			}
			if (e.keyCode === 13 && inputValue !== '' && onSelect) {
				onSelect(inputValue);
				_this.setState({
					navigate: 0,
					inputValue: inputValue,
					filteredItemList: []
				});
			}
		};
	}

	_createClass(AutoCompleter, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			// update itemList if itemList prop changed, and clear the input field
			if (nextProps.data !== this.props.data) {
				this.setState({
					itemList: nextProps.data,
					inputValue: ''
				});
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _state2 = this.state;
			var filteredItemList = _state2.filteredItemList;
			var inputValue = _state2.inputValue;
			var navigate = _state2.navigate;
			var _props2 = this.props;
			var placeholder = _props2.placeholder;
			var classes = _props2.classes;
			var styles = _props2.styles;
			var inputProps = _props2.inputProps;
			var keyboard = _props2.keyboard;

			return _react2['default'].createElement(
				'div',
				{ className: classes.root, style: styles.root, ref: 'autocompleter-root', onKeyDown: keyboard && this.handleKeyEvent },
				_react2['default'].createElement(_Input2['default'], { value: inputValue, placeholder: placeholder, className: classes.input, styles: styles.input, props: inputProps, onChange: this.handleInputChange, onBlur: this.onBlur, onFocus: this.onFocus }),
				_react2['default'].createElement(_ListContainer2['default'], { data: filteredItemList, onSelect: this.onSelect, className: classes.listContainer, itemClassName: classes.listItems, styles: styles.listContainer, itemStyles: styles.listItems, navigate: navigate - 1 })
			);
		}
	}], [{
		key: 'displayName',
		value: 'AutoCompleter',
		enumerable: true
	}, {
		key: 'propTypes',
		value: {
			onSelect: _react.PropTypes.func,
			onBlur: _react.PropTypes.func,
			onFocus: _react.PropTypes.func,
			onChange: _react.PropTypes.func,
			data: _react.PropTypes.array.isRequired,
			placeholder: _react.PropTypes.string,
			limit: _react.PropTypes.number,
			classes: _react.PropTypes.object,
			styles: _react.PropTypes.object,
			inputProps: _react.PropTypes.object,
			keyboard: _react.PropTypes.bool,
			value: _react.PropTypes.string
		},
		enumerable: true
	}, {
		key: 'defaultProps',
		value: {
			placeholder: '',
			limit: 20,
			classes: {},
			styles: {
				root: {},
				input: {},
				listContainer: {},
				listItems: {}
			},
			inputProps: {},
			keyboard: true,
			value: ''
		},
		enumerable: true
	}]);

	return AutoCompleter;
})(_react.Component);

exports['default'] = AutoCompleter;
module.exports = exports['default'];