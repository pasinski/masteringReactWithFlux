/* istanbul ignore next */'use strict';var ListenerMethods = require('reflux-core/lib/ListenerMethods'), 
ListenerMixin = require('./ListenerMixin'), 
_ = require('reflux-core/lib/utils');

module.exports = function (listenable, key, filterFunc) {

    _.throwIf(_.isFunction(key), 'Reflux.connectFilter() requires a key.');

    return { 
        getInitialState: function /* istanbul ignore next */getInitialState() {
            if (!_.isFunction(listenable.getInitialState)) {
                return {};}


            // Filter initial payload from store.
            var result = filterFunc.call(this, listenable.getInitialState());
            if (typeof result !== 'undefined') {
                return _.object([key], [result]);} else 
            {
                return {};}}, 


        componentDidMount: function /* istanbul ignore next */componentDidMount() {
            var me = this;

            _.extend(this, ListenerMethods);

            this.listenTo(listenable, function (value) {
                var result = filterFunc.call(me, value);
                me.setState(_.object([key], [result]));});}, 


        componentWillUnmount: ListenerMixin.componentWillUnmount };};