"use strict"; /* istanbul ignore next */Object.defineProperty(exports, "__esModule", { value: true });var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;};

var /* istanbul ignore next */_reflux = require('reflux'); /* istanbul ignore next */var _reflux2 = _interopRequireDefault(_reflux);
var /* istanbul ignore next */_actions = require('appRoot/actions'); /* istanbul ignore next */var _actions2 = _interopRequireDefault(_actions);
var /* istanbul ignore next */_superagent = require('superagent'); /* istanbul ignore next */var _superagent2 = _interopRequireDefault(_superagent);
var /* istanbul ignore next */_appConfig = require('appRoot/appConfig'); /* istanbul ignore next */var _appConfig2 = _interopRequireDefault(_appConfig);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}exports.default = 

/* istanbul ignore next */_reflux2.default.createStore({ 
	listenables: /* istanbul ignore next */_actions2.default, 
	endpoint: /* istanbul ignore next */_appConfig2.default.apiRoot + '/posts', 
	getPostsByPage: function /* istanbul ignore next */getPostsByPage() {/* istanbul ignore next */var page = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0]; /* istanbul ignore next */var params = arguments[1];
		var start = /* istanbul ignore next */_appConfig2.default.pageSize * (page - 1), 
		end = start + /* istanbul ignore next */_appConfig2.default.pageSize, 
		query = { 
			// newest to oldest
			'_sort': 'date', 
			'_order': 'DESC', 
			'_start': /* istanbul ignore next */_appConfig2.default.pageSize * (page - 1), 
			'_end': /* istanbul ignore next */_appConfig2.default.pageSize * (page - 1) + /* istanbul ignore next */_appConfig2.default.pageSize }, 

		us = this;


		if ( /* istanbul ignore next */(typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
			// ES6 extend object
			Object.assign(query, params);}


		if (this.currentRequest) {
			this.currentRequest.abort();
			this.currentRequest = null;}


		return new Promise(function (resolve, reject) {
			us.currentRequest = /* istanbul ignore next */_superagent2.default.get(us.endpoint);
			us.currentRequest.
			query(query).
			end(function (err, res) {
				var results = res.body;
				function complete() {
					// unfortunately if multiple request had been made
					// They would all get resolved on the first invocation of this
					// Undesireable, when we are rapid firing searches
					// Actions.getPostsByPage.completed({ start: query._start, end: query._end, results: results });
					resolve({ start: query._start, end: query._end, results: results });}

				if (res.ok) {
					// if q param (search) filter by other params, cause it doesn't
					// problem with json-server, realistically we'd fix this on the server
					if (params.q) {
						results = results.filter(function (post) {
							return params.user ? post.user == params.user : true;});}


					/* istanbul ignore next */_appConfig2.default.loadTimeSimMs ? setTimeout(complete, /* istanbul ignore next */_appConfig2.default.loadTimeSimMs) : complete();} else 
				{
					reject(Error(err));
					// same outcome as above
					// Actions.getPostsByPage.failed(err);
				}
				this.currentRequest = null;}.
			bind(us));});}, 


	//-- ACTION HANDLERS
	onGetPost: function /* istanbul ignore next */onGetPost(id) {
		function req() {
			/* istanbul ignore next */_superagent2.default.
			get(this.endpoint).
			query({ 
				id: id }).

			end(function (err, res) {
				if (res.ok) {
					if (res.body.length > 0) {
						/* istanbul ignore next */_actions2.default.getPost.completed(res.body[0]);} else 
					{
						/* istanbul ignore next */_actions2.default.getPost.failed('Post (' + id + ') not found');}} else 

				{
					/* istanbul ignore next */_actions2.default.getPost.failed(err);}});}



		/* istanbul ignore next */_appConfig2.default.loadTimeSimMs ? setTimeout(req.bind(this), /* istanbul ignore next */_appConfig2.default.loadTimeSimMs) : req();}, 

	onModifyPost: function /* istanbul ignore next */onModifyPost(post, id) {
		function req() {
			/* istanbul ignore next */_superagent2.default[
			id ? 'put' : 'post'](id ? this.endpoint + '/' + id : this.endpoint).
			send(post).
			end(function (err, res) {
				if (res.ok) {
					/* istanbul ignore next */_actions2.default.modifyPost.completed(res);} else 
				{
					/* istanbul ignore next */_actions2.default.modifyPost.completed();}});}



		/* istanbul ignore next */_appConfig2.default.loadTimeSimMs ? setTimeout(req.bind(this), /* istanbul ignore next */_appConfig2.default.loadTimeSimMs) : req();} });