/* istanbul ignore next */'use strict';var ListenerMethods = require('reflux-core/lib/ListenerMethods'), 
ListenerMixin = require('./ListenerMixin'), 
_ = require('reflux-core/lib/utils');

module.exports = function (listenable, key) {

    _.throwIf(typeof key === 'undefined', 'Reflux.connect() requires a key.');

    return { 
        getInitialState: function /* istanbul ignore next */getInitialState() {
            if (!_.isFunction(listenable.getInitialState)) {
                return {};}


            return _.object([key], [listenable.getInitialState()]);}, 

        componentDidMount: function /* istanbul ignore next */componentDidMount() {
            var me = this;

            _.extend(me, ListenerMethods);

            this.listenTo(listenable, function (v) {
                me.setState(_.object([key], [v]));});}, 


        componentWillUnmount: ListenerMixin.componentWillUnmount };};